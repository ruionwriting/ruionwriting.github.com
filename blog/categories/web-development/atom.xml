<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web development | RuiOnWriting.NET]]></title>
  <link href="http://ruionwriting.net/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://ruionwriting.net/"/>
  <updated>2014-02-13T22:37:15+00:00</updated>
  <id>http://ruionwriting.net/</id>
  <author>
    <name><![CDATA[Rui Marques]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling ASP.NET PostBacks with URL Rewriting]]></title>
    <link href="http://ruionwriting.net/blog/2013/10/01/handling-asp-dot-net-postbacks-with-url-rewriting/"/>
    <updated>2013-10-01T22:18:00+01:00</updated>
    <id>http://ruionwriting.net/blog/2013/10/01/handling-asp-dot-net-postbacks-with-url-rewriting</id>
    <content type="html"><![CDATA[<p>Recently a collegue develop crossed with this strange error <strong><em>Validation of viewstate MAC failed&hellip;</em></strong> when posting a contacts form. Strangely the error only happened when using the re-written url off the contacts page (<code>contacts/</code>), calling <code>contacts.aspx</code> directly worked flawlessly. This is a C# port based on ScottGu&rsquo;s <a href="http://weblogs.asp.net/scottgu/archive/2007/02/26/tip-trick-url-rewriting-with-asp-net.aspx">solution</a>.<!-- more --></p>

<p>A few minutes after I’ve remembered that I had to strugle with this issue when implementing a website using url-rewriting with <a href="http://iirf.codeplex.com/">IIRF</a> (it was a requirement). The problem is that when using url-rewriting the <code>&lt;form&gt;</code> control does not render the proper url but the re-written one. The solution is to write a form control adapter and I found, at the time I had the problem, the right solution from ScottGu&rsquo;s. Since my language of choice is C# I’m going to share the solution right here:</p>

<h2>Step 1</h2>

<p><strong>Create a FormRewriterControlAdapter class</strong></p>

<p>{% codeblock lang:csharp FormRewriterControlAdapter.cs %}
using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;</p>

<p>public class FormRewriterControlAdapter : System.Web.UI.Adapters.ControlAdapter
{</p>

<pre><code>protected override void Render(HtmlTextWriter writer)
{
    base.Render(new RewriteFormHtmlTextWriter(writer));
}
</code></pre>

<p>}</p>

<p>public class RewriteFormHtmlTextWriter : HtmlTextWriter
{</p>

<pre><code>public RewriteFormHtmlTextWriter(HtmlTextWriter writer) : base(writer)
{
    this.InnerWriter = writer.InnerWriter;
}

public RewriteFormHtmlTextWriter(System.IO.TextWriter writer) : base (writer)
{
    base.InnerWriter = writer;
}

public override void WriteAttribute(string name, string value, bool fEncode)
{
    // If the attribute we are writing is the "action" attribute, and we are not on a sub-control,
    // then replace the value to write with the raw URL of the request - which ensures that we'll
    // preserve the PathInfo value on postback scenarios

    if (name == "action")
    {
        HttpContext context = HttpContext.Current;

        if (context.Items["ActionAlreadyWritten"] == null)
        {
            // Because we are using an url reweriting HttpModule, we will use the
            // Request.RawUrl property within ASP.NET to retrieve the origional URL
            // before it was re-written.  You'll want to change the line of code below
            // if you use a different URL rewriting implementation.

            // value = context.Request.RawUrl;
            value = context.Request.ServerVariables["HTTP_X_REWRITE_URL"];

            // Indicate that we've already rewritten the &lt;form&gt;'s action attribute to prevent
            // us from rewriting a sub-control under the &lt;form&gt; control

            context.Items["ActionAlreadyWritten"] = true;
        }
    }

    base.WriteAttribute(name, value, fEncode);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Step 2</h2>

<p><strong>Add adapter to App_Browsers</strong></p>

<ol>
<li>Add <code>ASP.NET</code> folder if it does not exists;</li>
<li>Create <code>Form.browser</code>:</li>
</ol>


<p>{% codeblock lang:xml Form.browser %}
<browsers></p>

<pre><code>&lt;browser refID="Default"&gt;
    &lt;controlAdapters&gt;
        &lt;adapter controlType="System.Web.UI.HtmlControls.HtmlForm"
            adapterType="FormRewriterControlAdapter" /&gt;
    &lt;/controlAdapters&gt;
&lt;/browser&gt;
</code></pre>

<p></browsers>
{% endcodeblock %}</p>

<p>I hope you’ll find this information useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The best web application framework utopia]]></title>
    <link href="http://ruionwriting.net/blog/2013/09/24/the-best-web-application-framework-utopia/"/>
    <updated>2013-09-24T20:42:00+01:00</updated>
    <id>http://ruionwriting.net/blog/2013/09/24/the-best-web-application-framework-utopia</id>
    <content type="html"><![CDATA[<p>Many times I found IT professionals, in particular programmers, arguing about what is the best technology to adopt for a certain project or for all projects for a specific company. As a web developer with several years getting the hands dirty with .NET development I found myself frequently observing (or getting in to) discussions about the subject. I really try to avoid to get in the middle&hellip; Ok! Not really :P<!-- more --></p>

<p>The truth is that, most of the time, is hard to move away without throwing our own perspective. I did that the past and I admit that I was a bit fundamentalist defending my own perspective.</p>

<h2>Discussions like &ldquo;what is best PHP or ASP.NET?&rdquo; are as common as useless.</h2>

<p>The more I learn the more I say that all technologies, in this case web frameworks, have pro’s and conn’s and that we must choose the best having the focus on the task and on the result we want to achieve.</p>

<h2>For me ASP.NET is the best (continue reading please)</h2>

<p>Naturally because is the one I use every day. I’ve already tried others like Java or PHP but I really like the way we can develop everything using a great IDE like Visual Studio and all the nice features that .NET ecosystem (web, desktop, services, etc) delivers. I love C# and with .NET I can do almost everything, core and services, with it.</p>

<h2>So what is the best one?</h2>

<p>The are so many of them, use the one that serves you better. The most used (Perl, PHP, Java, Python, Ruby, CFML, ASP, ASP.NET, etc) have great projects and platforms well known by everyone, so if a great project is using a certain technology and it works the way it is suppose to then is using the right technology, not necessarily the best but certainly the one that performs the job.</p>

<p>A simple equation:</p>

<p><code>secure + cost effective + well documented + well supported + good performance + flexible/extensible = the right choice</code></p>
]]></content>
  </entry>
  
</feed>
