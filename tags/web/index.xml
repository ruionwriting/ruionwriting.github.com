<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Rui Marques</title>
    <link>http://localhost:1313/tags/web/</link>
    <description>Recent content in Web on Rui Marques</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Rui Marques</copyright>
    <lastBuildDate>Tue, 01 Oct 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Handling ASP.NET PostBacks with URL Rewriting</title>
      <link>http://localhost:1313/blog/2013/10/01/handling-asp-dot-net-postbacks-with-url-rewriting/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/10/01/handling-asp-dot-net-postbacks-with-url-rewriting/</guid>
      <description>

&lt;p&gt;Recently a collegue develop crossed with this strange error &lt;strong&gt;&lt;em&gt;Validation of viewstate MAC failed&amp;hellip;&lt;/em&gt;&lt;/strong&gt; when posting a contacts form. Strangely the error only happened when using the re-written url off the contacts page (&lt;code&gt;contacts/&lt;/code&gt;), calling &lt;code&gt;contacts.aspx&lt;/code&gt; directly worked flawlessly. This is a C# port based on ScottGu&amp;rsquo;s &lt;a href=&#34;http://weblogs.asp.net/scottgu/archive/2007/02/26/tip-trick-url-rewriting-with-asp-net.aspx&#34;&gt;solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few minutes after I’ve remembered that I had to strugle with this issue when implementing a website using url-rewriting with &lt;a href=&#34;http://iirf.codeplex.com/&#34;&gt;IIRF&lt;/a&gt; (it was a requirement). The problem is that when using url-rewriting the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; control does not render the proper url but the re-written one. The solution is to write a form control adapter and I found, at the time I had the problem, the right solution from ScottGu&amp;rsquo;s. Since my language of choice is C# I’m going to share the solution right here:&lt;/p&gt;

&lt;h2 id=&#34;step-1-create-a-formrewritercontroladapter-class:4e4a0a997c03f39329a9e1b6ecf73233&#34;&gt;Step 1 - Create a FormRewriterControlAdapter class&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FormRewriterControlAdapter.cs&lt;/code&gt; file:
&lt;pre&gt;&lt;code class=&#34;cs&#34;&gt;using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;&lt;/p&gt;

&lt;p&gt;public class FormRewriterControlAdapter : System.Web.UI.Adapters.ControlAdapter
{
    protected override void Render(HtmlTextWriter writer)
    {
        base.Render(new RewriteFormHtmlTextWriter(writer));
    }
}&lt;/p&gt;

&lt;p&gt;public class RewriteFormHtmlTextWriter : HtmlTextWriter
{
    public RewriteFormHtmlTextWriter(HtmlTextWriter writer) : base(writer)
    {
        this.InnerWriter = writer.InnerWriter;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public RewriteFormHtmlTextWriter(System.IO.TextWriter writer) : base (writer)
{
    base.InnerWriter = writer;
}

public override void WriteAttribute(string name, string value, bool fEncode)
{
    // If the attribute we are writing is the &amp;quot;action&amp;quot; attribute, and we are not on a sub-control,
    // then replace the value to write with the raw URL of the request - which ensures that we&#39;ll
    // preserve the PathInfo value on postback scenarios

    if (name == &amp;quot;action&amp;quot;)
    {
        HttpContext context = HttpContext.Current;

        if (context.Items[&amp;quot;ActionAlreadyWritten&amp;quot;] == null)
        {
            // Because we are using an url reweriting HttpModule, we will use the
            // Request.RawUrl property within ASP.NET to retrieve the origional URL
            // before it was re-written.  You&#39;ll want to change the line of code below
            // if you use a different URL rewriting implementation.

            // value = context.Request.RawUrl;
            value = context.Request.ServerVariables[&amp;quot;HTTP_X_REWRITE_URL&amp;quot;];

            // Indicate that we&#39;ve already rewritten the &amp;lt;form&amp;gt;&#39;s action attribute to prevent
            // us from rewriting a sub-control under the &amp;lt;form&amp;gt; control

            context.Items[&amp;quot;ActionAlreadyWritten&amp;quot;] = true;
        }
    }

    base.WriteAttribute(name, value, fEncode);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-add-adapter-to-app-browsers:4e4a0a997c03f39329a9e1b6ecf73233&#34;&gt;Step 2 - Add adapter to App_Browsers&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;ASP.NET&lt;/code&gt; folder if it does not exists;&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;Form.browser&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Form.browser&lt;/code&gt; file:
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;browsers&amp;gt;
    &amp;lt;browser refID=&amp;ldquo;Default&amp;rdquo;&amp;gt;
        &amp;lt;controlAdapters&amp;gt;
            &amp;lt;adapter controlType=&amp;ldquo;System.Web.UI.HtmlControls.HtmlForm&amp;rdquo;
                adapterType=&amp;ldquo;FormRewriterControlAdapter&amp;rdquo; /&amp;gt;
        &amp;lt;/controlAdapters&amp;gt;
    &amp;lt;/browser&amp;gt;
&amp;lt;/browsers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;I hope you’ll find this information useful.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>