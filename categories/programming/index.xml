<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Rui Marques</title>
    <link>http://ruimarques.io/categories/programming/</link>
    <description>Recent content in Programming on Rui Marques</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Rui Marques</copyright>
    <lastBuildDate>Mon, 12 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://ruimarques.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Keep your web project dependencies under control</title>
      <link>http://ruimarques.io/blog/2015/10/12/keep-your-web-project-dependencies-under-control/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ruimarques.io/blog/2015/10/12/keep-your-web-project-dependencies-under-control/</guid>
      <description>

&lt;p&gt;These days almost any project we work on relies on dependencies (sometimes too many) on which we need to keep our eyes on. In general - in particular for big projects - can become a challenge to keep things under control as the projects evolve over time. If we consider the most common needs for web development we know that we need to have a good number of libraries and frameworks around.&lt;/p&gt;

&lt;h2 id=&#34;why-we-need-them:ab997d5f860b7f84eff37d36fa23ccb1&#34;&gt;Why we need them?&lt;/h2&gt;

&lt;p&gt;Dependencies are not a bad thing - we need them - and it&amp;rsquo;s a way to share code, reuse and most importantly - in most cases - to avoid reinventing the wheel over and over. I&amp;rsquo;m a bit more focused on the needs around web projects but similar lessons and ideas are valid to many other contexts.&lt;/p&gt;

&lt;h2 id=&#34;when-to-introduce-a-dependency:ab997d5f860b7f84eff37d36fa23ccb1&#34;&gt;When to introduce a dependency?&lt;/h2&gt;

&lt;p&gt;Every time we need to solve a problem that is already solved and there is no existing code on the current project is in general a good idea to add an existing dependency if it not falls on &lt;em&gt;&lt;code&gt;When NOT to introduce a dependency?&lt;/code&gt;&lt;/em&gt; bellow. It does not matter if it is 3rd party or from our internal packages repository - let&amp;rsquo;s say NuGet/Bower for the sake of a clear example - if the problem is already solved let&amp;rsquo;s not repeat ourselves and let&amp;rsquo;s keep our focus on delivering what we are building and trying to deliver.&lt;/p&gt;

&lt;h2 id=&#34;when-not-to-introduce-a-dependency:ab997d5f860b7f84eff37d36fa23ccb1&#34;&gt;When NOT to introduce a dependency?&lt;/h2&gt;

&lt;p&gt;When the problem you need to solve is on the reach of writing a small function - even if you need to reuse it across your project - and/or when your are building a new package or library to distribute around, it is always a good idea not to introduce more dependencies.&lt;/p&gt;

&lt;p&gt;A good example is if we are building a JavaScript component/utility to share across our company projects or even to make it available as open-source, not adding external dependencies facilitates our code distribution with less friction. No one likes to add dependencies that come with a lot of ballast.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up:ab997d5f860b7f84eff37d36fa23ccb1&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We all know this: less dependencies is less requests, less request sizes and faster load times. No brainer.&lt;/li&gt;
&lt;li&gt;Keep the amount of dependencies as low as possible. Less moving part less risks;&lt;/li&gt;
&lt;li&gt;As the number of dependencies increases as well the amount of work required to keep them up to date will increase over time. Take AngularJS, Angular UI, ui-router - and related - as a good example;&lt;/li&gt;
&lt;li&gt;Avoid adding full libraries for additional limited functionality that we plan to use on a limited context/scope in your project;&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s always a good idea to solve any problem writing the less code as possible. Adding the minimum number of dependencies as possible is also a good way to keep our feet dry.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is all based on what I&amp;rsquo;ve experienced over the years and feel free to consider as completely subjective if this does fit your expectations or experience.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>